* Web-tools
  This is a non-supported library for web requests manipulation. The main parts are:
  - simple rest clients implementation that handles endpoints - see example in tests.lisp:
    - endpoints definition
    - jsoning and unjsoning,
    - getting token from authinfo file
  - wrapper over http-request so that it can be used in repl - see http-requests* docstring.

  Not expected to be useful for anyone else:
  - uses custom repl-oriented doc package (unpublished) so cannot be loaded directly
  - not cleaned up.
  - sbcl specific
  - .authinfo is not much popular these days

* Examples
** Forms handling
   :PROPERTIES:
   :header-args:lisp: :package wt
   :END:

 Let's take google as an example. This loads page with a form.
   #+begin_src lisp :results none
   (http-request* "http://google.com")
 #+end_src

 #+begin_src lisp :results org
 (clean-html)
 #+end_src

 #+RESULTS:
 #+begin_src org
 "Google

 VyhledáváníObrázkyMapyPlayYouTubeZprávyGmailDiskDalší »
 Webová historie | Nastavení | Přihlásit se


   

   Rozšířené vyhledávání
 Inzerujte s GooglemŘešení pro firmyVše o GoogluGoogle.cz
 © 2020 - Ochrana soukromí - Smluvní podmínky"
 T
 #+end_src

 Collect-Hidden-Parameters poskytuje seznam consu skrytých parametrů. Cons to
 je proto, aby mohl být předán jako parametr pro http-request, ale pro
 tištění potřebuje převést na list.

   #+begin_src lisp
 (clist-to-llist (collect-hidden-parameters))
   #+end_src

   #+RESULTS:
   | ie     | ISO-8859-1                                   |
   | hl     | cs                                           |
   | source | hp                                           |
   | biw    | NIL                                          |
   | bih    | NIL                                          |
   | iflsig | AINFCbYAAAAAX7KrBetK2Vrjauc0BL2IWwwuHIDOQkoX |
   | gbv    | 1                                            |

 #+begin_src lisp
 (collect-unhidden-parameters)
 #+end_src

 #+RESULTS:
 | q | btnG | btnI |

 #+begin_src lisp
     (html-post-form :pars '(("q" . "cl-who")))
     (clean-html)
 #+end_src

 #+RESULTS:
 #+begin_example
 cl-who - Hledat Googlem
 Google
 Google
 VšeObrázkyMapyZprávyVideaNákupyKnihy
 Vyhledávací nástroje
 Jakýkoli jazyk Jakýkoli jazyk Stránky pouze česky
 Bez časového omezení Bez časového omezení  Za poslední hodinu  Posledních 24 hodin  Poslední týden  Poslední měsíc  Poslední rok
 Všechny výsledky Všechny výsledky Přesná shoda
 CL-WHO - Yet another Lisp markup language
 edicl.github.io › cl-who
 CL-WHO tries to create efficient code in that it makes constant strings as long as possible. In other words, the code generated by the CL-WHO macros will ...
 Example usage · Syntax and Semantics · The CL-WHO dictionary
 cl-who and format - Stack Overflow
 stackoverflow.com › questions › cl-who-and-format
 That's because you don't want to write directly in the stream. CL-USER> (with- html-output-to-string (s) (:div :id
 #+end_example

* Slynk setup for this README
#+begin_src lisp
  (setf (cdr (assoc 'slynk:*string-elision-length* slynk:*slynk-pprint-bindings*)) 1000)
#+end_src
